{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["days","DayPanel","id","timetable","date","Date","setHours","setDate","getDate","day","getDay","table","currentTimetable","timeline","length","i","iTimeline","for","formedTable","formedDate","slice","getMonth","getFullYear","lesson","index","forEach","it","toISODate","getTime","map","description","start","end","name","parts","split","parseInt","App","useState","tab","setTab","undefined","setTimetable","useEffect","fetch","then","r","json","activePanel","item","onClick","selected","activeStory","_","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","bridge","send","catch","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0650dc12.chunk.js","sourcesContent":["import {\n    AppRoot,\n    Group,\n    PanelHeader,\n    View,\n    Panel,\n    Tabs,\n    TabsItem,\n    PanelSpinner,\n    Cell,\n    Epic\n} from \"@vkontakte/vkui\";\nimport \"@vkontakte/vkui/dist/vkui.css\";\nimport {useEffect, useState} from \"react\";\n\nconst days = [\"Сегодня\", \"Завтра\", \"Послезавтра\"]\nfunction App() {\n    const [tab, setTab] = useState(0)\n    const [timetable, setTimetable] = useState(undefined);\n\n    useEffect(() => {\n        if(!timetable) fetch(\"./timetable.json\")\n            .then(r => r.json())\n            .then(r => setTimetable(r))\n    })\n\n    return <AppRoot>\n        <View activePanel=\"main\">\n            <Panel id=\"main\">\n                <PanelHeader>Расписание</PanelHeader>\n                {timetable ?\n                    <Group>\n                        <Tabs>\n                            {\n                                days.map((item, index) =>\n                                    <TabsItem\n                                        onClick={() => setTab(index) }\n                                        selected={tab===index}\n                                    >{item}</TabsItem>\n                                )\n                            }\n                        </Tabs>\n                        <Epic activeStory={tab}>\n                            {\n                                days.map((_, index) =>\n                                    <DayPanel id={index} timetable={timetable}/>)\n                            }\n                        </Epic>\n                    </Group>\n                : <PanelSpinner />}\n            </Panel>\n        </View>\n    </AppRoot>\n}\n\nfunction DayPanel({id, timetable}) {\n    const date = new Date()\n    date.setHours(0, 0, 0, 0)\n    date.setDate(date.getDate() + id)\n    const day = date.getDay()\n\n    const table = timetable.table[day]\n    let currentTimetable = timetable.timeline[timetable.timeline.length-1].table\n    for(let i in timetable.timeline) {\n        const iTimeline = timetable.timeline[i]\n        if(typeof iTimeline.for !== \"undefined\"){\n            if(iTimeline.for===day){\n                currentTimetable = iTimeline.table\n                break\n            }\n        }\n    }\n\n    const formedTable = []\n    const formedDate = (\"0\"+date.getDate()).slice(-2)\n        + \".\" + (\"0\"+(date.getMonth()+1)).slice(-2)\n        + \".\" + date.getFullYear()\n\n    for (let i in table) {\n        const lesson = table[i]\n\n        if(typeof formedTable[lesson.index] == \"undefined\") {\n            if(typeof lesson['days'] != \"undefined\") {\n                lesson['days'].forEach(it => {\n                    if (it === formedDate)\n                        formedTable[lesson.index-1] = lesson\n                })\n            }else if(\n                typeof lesson['start'] != \"undefined\"\n            ) {\n                let startDate =  typeof lesson['start']== \"boolean\"?\n                    date : toISODate(lesson['start'])\n                if(startDate.getTime()<=date.getTime()) {\n                    if(typeof lesson['end'] != \"undefined\"){\n                        let endDate = typeof lesson['end']== \"boolean\"?\n                            date : toISODate(lesson['end'])\n\n                        if(endDate.getTime()>=date.getTime()){\n                            formedTable[lesson.index-1] = lesson\n                        }\n                    }else formedTable[lesson.index-1] = lesson\n                }\n            }\n        }\n    }\n\n    return <Panel id={id}>\n        {\n            formedTable.map((it, i) =>\n                <Cell description={\n                    currentTimetable[i].start+\" - \"+currentTimetable[i].end\n                }>\n                    {(i+1)+\". \"+(it?.name||'—')}</Cell>)\n        }\n    </Panel>\n}\n\nfunction toISODate(date){\n    const parts = date.split(\".\")\n    return new Date(\n        parseInt(parts[2]),\n        parseInt(parts[1]),\n        parseInt(parts[0])\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport bridge from '@vkontakte/vk-bridge';\nimport reportWebVitals from './reportWebVitals';\n\nbridge.send(\"VKWebAppInit\")\n    .then()\n    .catch(console.log)\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}